{
  "is_book": false,
  "anchor": "technology_guides",
  "file": "index.html",
  "name": "PCIe Modeling Library",
  "headings": [
    {
      "level": 1,
      "anchor": "supported-hardware-features",
      "text": "Supported Hardware Features"
    },
    {
      "level": 1,
      "anchor": "simics-pcie-abstraction",
      "text": "Simics PCIe Abstraction"
    }
  ],
  "children": [
    {
      "file": "quickstart.html",
      "name": "Quickstart",
      "headings": [
        {
          "level": 1,
          "anchor": "endpoint",
          "text": "Endpoint"
        },
        {
          "level": 1,
          "anchor": "multi-function-endpoint",
          "text": "Multi-Function Endpoint"
        },
        {
          "level": 1,
          "anchor": "switch",
          "text": "Switch"
        },
        {
          "level": 1,
          "anchor": "root-complex",
          "text": "Root Complex"
        }
      ],
      "children": []
    },
    {
      "file": "high-level-design.html",
      "name": "High level design",
      "headings": [],
      "children": []
    },
    {
      "file": "pcie-in-dml.html",
      "name": "PCIe in DML",
      "headings": [
        {
          "level": 1,
          "anchor": "endpoints",
          "text": "Endpoints"
        },
        {
          "level": 2,
          "anchor": "configuration-header",
          "text": "Configuration Header"
        },
        {
          "level": 2,
          "anchor": "device-id-vendor-id-and-class-code",
          "text": "Device ID, Vendor ID and Class Code"
        },
        {
          "level": 2,
          "anchor": "capabilities",
          "text": "Capabilities"
        },
        {
          "level": 2,
          "anchor": "base-address-registers",
          "text": "Base Address Registers"
        },
        {
          "level": 2,
          "anchor": "interrupts",
          "text": "Interrupts"
        },
        {
          "level": 2,
          "anchor": "read-write-pcie-memory",
          "text": "Read/Write PCIe Memory"
        },
        {
          "level": 2,
          "anchor": "send-receive-messages",
          "text": "Send/Receive Messages"
        },
        {
          "level": 1,
          "anchor": "root-complexes-and-switches",
          "text": "Root Complexes and Switches"
        },
        {
          "level": 2,
          "anchor": "handling-upstream-traffic",
          "text": "Handling upstream traffic"
        },
        {
          "level": 2,
          "anchor": "handling-upstream-messages",
          "text": "Handling upstream messages"
        },
        {
          "level": 1,
          "anchor": "other-bridges",
          "text": "Other bridges"
        }
      ],
      "children": []
    },
    {
      "file": "dml-template-reference.html",
      "name": "DML template reference",
      "headings": [],
      "children": [
        {
          "file": "common.html",
          "name": "Common and Type 0 templates",
          "headings": [
            {
              "level": 1,
              "anchor": "pcie_endpoint",
              "text": "pcie_endpoint"
            },
            {
              "level": 1,
              "anchor": "pcie_multifunction_endpoint",
              "text": "pcie_multifunction_endpoint"
            },
            {
              "level": 1,
              "anchor": "pcie_device",
              "text": "pcie_device"
            },
            {
              "level": 1,
              "anchor": "config_bank",
              "text": "config_bank"
            },
            {
              "level": 2,
              "anchor": "common-methods",
              "text": "Common methods"
            },
            {
              "level": 3,
              "anchor": "update_function-uint16-device_id",
              "text": "update_function(uint16 device_id)"
            },
            {
              "level": 3,
              "anchor": "del_function",
              "text": "del_function()"
            },
            {
              "level": 3,
              "anchor": "get_device_id-uint16",
              "text": "get_device_id() -> (uint16)"
            },
            {
              "level": 3,
              "anchor": "get_pasid-uint32",
              "text": "get_pasid() -> (uint32)"
            },
            {
              "level": 3,
              "anchor": "del_mappings-pcie_type_t-type",
              "text": "del_mappings(pcie_type_t type)"
            },
            {
              "level": 3,
              "anchor": "update_mappings-pcie_type_t-type",
              "text": "update_mappings(pcie_type_t type)"
            },
            {
              "level": 3,
              "anchor": "lock_hwinit_registers",
              "text": "lock_hwinit_registers()"
            },
            {
              "level": 3,
              "anchor": "unlock_hwinit_registers",
              "text": "unlock_hwinit_registers()"
            },
            {
              "level": 3,
              "anchor": "raise_legacy_interrupt",
              "text": "raise_legacy_interrupt()"
            },
            {
              "level": 3,
              "anchor": "lower_legacy_interrupt",
              "text": "lower_legacy_interrupt()"
            },
            {
              "level": 3,
              "anchor": "issue_transaction-transaction_t-t-uint64-addr-pcie_error_t",
              "text": "issue_transaction(transaction_t *t, uint64 addr) -> (pcie_error_t)"
            },
            {
              "level": 2,
              "anchor": "memory-methods",
              "text": "Memory methods"
            },
            {
              "level": 3,
              "anchor": "memory-read-uint64-addr-uint64-size-pcie_error_t-uint64",
              "text": "memory.read(uint64 addr, uint64 size) -> (pcie_error_t, uint64)"
            },
            {
              "level": 3,
              "anchor": "memory-read_bytes-uint64-addr-buffer_t-buf-pcie_error_t",
              "text": "memory.read_bytes(uint64 addr, buffer_t buf) -> (pcie_error_t)"
            },
            {
              "level": 3,
              "anchor": "memory-write-uint64-addr-uint64-value-uint64-size-pcie_error_t",
              "text": "memory.write(uint64 addr, uint64 value, uint64 size) -> (pcie_error_t)"
            },
            {
              "level": 3,
              "anchor": "memory-write_bytes-uint64-addr-bytes_t-bytes-pcie_error_t",
              "text": "memory.write_bytes(uint64 addr, bytes_t bytes) -> (pcie_error_t)"
            },
            {
              "level": 2,
              "anchor": "message-methods-sending",
              "text": "Message methods - sending"
            },
            {
              "level": 3,
              "anchor": "message-operation-transaction_t-t-uint64-addr-bool",
              "text": "message.operation(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-ats_invalidate-transaction_t-t-uint64-addr-bool",
              "text": "message.ats_invalidate(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-prs_request-transaction_t-t-uint64-addr-bool",
              "text": "message.prs_request(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-prs_response-transaction_t-t-uint64-addr-bool",
              "text": "message.prs_response(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-vendor_defined_type_1-transaction_t-t-uint64-addr-bool",
              "text": "message.vendor_defined_type_1(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-pm_active_state_nak-transaction_t-t-uint64-addr-bool",
              "text": "message.pm_active_state_nak(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-pm_turn_off-transaction_t-t-uint64-addr-bool",
              "text": "message.pm_turn_off(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-unlock-transaction_t-t-uint64-addr-bool",
              "text": "message.unlock(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-set_slot_power_limit-transaction_t-t-uint64-addr-bool",
              "text": "message.set_slot_power_limit(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-vendor_defined_type_0-transaction_t-t-uint64-addr-bool",
              "text": "message.vendor_defined_type_0(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-hot_plug-transaction_t-t-uint64-addr-bool",
              "text": "message.hot_plug(transaction_t *t, uint64 addr) -> (bool)"
            },
            {
              "level": 3,
              "anchor": "message-unknown-transaction_t-t-uint64-addr-pcie_message_type_t-code-bool",
              "text": "message.unknown(transaction_t *t, uint64 addr, pcie_message_type_t code) -> (bool)"
            },
            {
              "level": 2,
              "anchor": "message-methods-receiving",
              "text": "Message methods - receiving"
            },
            {
              "level": 3,
              "anchor": "message-send-map_target_t-mt-uint64-addr-pcie_message_type_t-type-pcie_msg_route_t-route-pcie_error_t",
              "text": "message.send(map_target_t *mt, uint64 addr, pcie_message_type_t type, pcie_msg_route_t route) -> (pcie_error_t)"
            },
            {
              "level": 3,
              "anchor": "message-send_bytes-map_target_t-mt-uint64-addr-pcie_message_type_t-type-pcie_msg_route_t-route-bytes_",
              "text": "message.send_bytes(map_target_t *mt, uint64 addr, pcie_message_type_t type, pcie_msg_route_t route, bytes_"
            },
            {
              "level": 3,
              "anchor": "transaction_access-transaction_t-t-uint64-offset-void-aux-exception_type_t",
              "text": "transaction_access(transaction_t *t, uint64 offset, void *aux) -> (exception_type_t)"
            },
            {
              "level": 1,
              "anchor": "physical_config_bank",
              "text": "physical_config_bank"
            },
            {
              "level": 1,
              "anchor": "type_0_bank",
              "text": "type_0_bank"
            },
            {
              "level": 1,
              "anchor": "hwinit",
              "text": "hwinit"
            },
            {
              "level": 1,
              "anchor": "abstract_base_address",
              "text": "abstract_base_address"
            },
            {
              "level": 1,
              "anchor": "pcie_base_address",
              "text": "pcie_base_address"
            },
            {
              "level": 1,
              "anchor": "memory_base_address",
              "text": "memory_base_address"
            },
            {
              "level": 1,
              "anchor": "io_base_address",
              "text": "io_base_address"
            },
            {
              "level": 1,
              "anchor": "defining_expansion_rom",
              "text": "defining_expansion_rom"
            },
            {
              "level": 1,
              "anchor": "upstream_target",
              "text": "upstream_target"
            }
          ],
          "children": []
        },
        {
          "file": "bridge.html",
          "name": "Bridge and Type 1 templates",
          "headings": [
            {
              "level": 1,
              "anchor": "pcie_bridge",
              "text": "pcie_bridge"
            },
            {
              "level": 1,
              "anchor": "pcie_root_port",
              "text": "pcie_root_port"
            },
            {
              "level": 1,
              "anchor": "message_port",
              "text": "message_port"
            },
            {
              "level": 1,
              "anchor": "handling_messages",
              "text": "handling_messages"
            },
            {
              "level": 2,
              "anchor": "methods",
              "text": "Methods"
            },
            {
              "level": 3,
              "anchor": "message-transaction_t-t-uint64-addr-pcie_message_type_t-type-pcie_error_t",
              "text": "message(transaction_t *t, uint64 addr, pcie_message_type_t type) -> (pcie_error_t)"
            },
            {
              "level": 1,
              "anchor": "handling_prs_messages",
              "text": "handling_prs_messages"
            },
            {
              "level": 2,
              "anchor": "page_response",
              "text": "page_response"
            },
            {
              "level": 2,
              "anchor": "page_request_received",
              "text": "page_request_received"
            },
            {
              "level": 1,
              "anchor": "pcie_translator",
              "text": "pcie_translator"
            },
            {
              "level": 1,
              "anchor": "ats_upstream_translator",
              "text": "ats_upstream_translator"
            },
            {
              "level": 2,
              "anchor": "ats_invalidate",
              "text": "ats_invalidate"
            },
            {
              "level": 1,
              "anchor": "type_1_bank",
              "text": "type_1_bank"
            },
            {
              "level": 1,
              "anchor": "type_1_base_address",
              "text": "type_1_base_address"
            },
            {
              "level": 1,
              "anchor": "downstream_port",
              "text": "downstream_port"
            }
          ],
          "children": []
        },
        {
          "file": "capabilities-list.html",
          "name": "List of capability templates",
          "headings": [],
          "children": []
        },
        {
          "file": "capabilities.html",
          "name": "Capabilities templates",
          "headings": [
            {
              "level": 1,
              "anchor": "power-management-capability-registers",
              "text": "Power Management Capability registers"
            },
            {
              "level": 1,
              "anchor": "pci-express-capability-registers",
              "text": "PCI Express Capability registers"
            },
            {
              "level": 1,
              "anchor": "vpd-capability-registers",
              "text": "VPD Capability registers"
            },
            {
              "level": 1,
              "anchor": "message-signaled-interrupts-msi-capability-registers",
              "text": "Message Signaled Interrupts (MSI) Capability registers"
            },
            {
              "level": 2,
              "anchor": "methods",
              "text": "Methods"
            },
            {
              "level": 3,
              "anchor": "signal_all_pending",
              "text": "signal_all_pending()"
            },
            {
              "level": 3,
              "anchor": "raise-uint8-i",
              "text": "raise(uint8 i)"
            },
            {
              "level": 3,
              "anchor": "lower-uint8-i",
              "text": "lower(uint8 i)"
            },
            {
              "level": 1,
              "anchor": "message-signaled-interrupts-x-msi-x-capability-registers",
              "text": "Message Signaled Interrupts X (MSI-X) Capability registers"
            },
            {
              "level": 2,
              "anchor": "methods-2",
              "text": "Methods"
            },
            {
              "level": 3,
              "anchor": "raise-uint16-i",
              "text": "raise(uint16 i)"
            },
            {
              "level": 3,
              "anchor": "lower-uint16-i",
              "text": "lower(uint16 i)"
            },
            {
              "level": 1,
              "anchor": "subsystem-id-and-subsystem-vendor-id-capability-registers",
              "text": "Subsystem ID and Subsystem Vendor ID Capability registers"
            },
            {
              "level": 1,
              "anchor": "conventional-pci-advanced-features-capability-af-registers",
              "text": "Conventional PCI Advanced Features Capability (AF) registers"
            },
            {
              "level": 1,
              "anchor": "enhanced-allocation-ea-capability-registers",
              "text": "Enhanced Allocation (EA) Capability registers"
            },
            {
              "level": 1,
              "anchor": "flattening-portal-bridge-fpb-capability-registers",
              "text": "Flattening Portal Bridge (FPB) Capability registers"
            }
          ],
          "children": []
        },
        {
          "file": "extended-capabilities.html",
          "name": "Extended Capabilities templates",
          "headings": [
            {
              "level": 1,
              "anchor": "advanced-error-reporting-aer-capability-registers",
              "text": "Advanced Error Reporting (AER) Capability registers"
            },
            {
              "level": 1,
              "anchor": "virtual-channel-vc-capability-registers",
              "text": "Virtual Channel (VC) Capability registers"
            },
            {
              "level": 1,
              "anchor": "device-serial-number-dsn-capability-registers",
              "text": "Device Serial Number (DSN) Capability registers"
            },
            {
              "level": 1,
              "anchor": "device-power-budgeting-dpb-capability-registers",
              "text": "Device Power Budgeting (DPB) Capability registers"
            },
            {
              "level": 1,
              "anchor": "root-complex-link-declaration-rcld-capability-registers",
              "text": "Root Complex Link Declaration (RCLD) Capability registers"
            },
            {
              "level": 1,
              "anchor": "root-complex-internal-link-control-rcilc-capability-registers",
              "text": "Root Complex Internal Link Control (RCILC) Capability registers"
            },
            {
              "level": 1,
              "anchor": "root-complex-event-collector-endpoint-association-rcecea-capability-registers",
              "text": "Root Complex Event Collector Endpoint Association (RCECEA) Capability registers"
            },
            {
              "level": 1,
              "anchor": "multi-function-virtual-channel-mfvc-capability-registers",
              "text": "Multi-Function Virtual Channel (MFVC) Capability registers"
            },
            {
              "level": 1,
              "anchor": "rcrb-header-rcrb-capability-registers",
              "text": "RCRB Header (RCRB) Capability registers"
            },
            {
              "level": 1,
              "anchor": "vendor-specific-extended-capability-vsec-registers",
              "text": "Vendor-Specific Extended Capability (VSEC) registers"
            },
            {
              "level": 1,
              "anchor": "access-control-services-acs-capability-registers",
              "text": "Access Control Services (ACS) Capability registers"
            },
            {
              "level": 1,
              "anchor": "alternate-routing-id-ari-capability-registers",
              "text": "Alternate Routing ID (ARI) Capability registers"
            },
            {
              "level": 1,
              "anchor": "address-translation-service-ats-capability-registers",
              "text": "Address Translation Service (ATS) Capability registers"
            },
            {
              "level": 2,
              "anchor": "methods",
              "text": "Methods"
            },
            {
              "level": 1,
              "anchor": "multicast-mc-capability-registers",
              "text": "Multicast (MC) Capability registers"
            },
            {
              "level": 1,
              "anchor": "page-request-service-prs-capability-registers",
              "text": "Page Request Service (PRS) Capability registers"
            },
            {
              "level": 2,
              "anchor": "methods-2",
              "text": "Methods"
            },
            {
              "level": 1,
              "anchor": "resizable-bar-rbar-capability-registers",
              "text": "Resizable BAR (RBAR) Capability registers"
            },
            {
              "level": 1,
              "anchor": "vf-resizable-bar-vfrbar-capability-registers",
              "text": "VF Resizable BAR (VFRBAR) Capability registers"
            },
            {
              "level": 1,
              "anchor": "dynamic-power-allocation-dpa-capability-registers",
              "text": "Dynamic Power Allocation (DPA) Capability registers"
            },
            {
              "level": 1,
              "anchor": "transaction-processing-hints-tph-requester-extended-capability-registers",
              "text": "Transaction Processing Hints (TPH) Requester Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "latency-tolerance-reporting-ltr-capability-registers",
              "text": "Latency Tolerance Reporting (LTR) Capability registers"
            },
            {
              "level": 1,
              "anchor": "secondary-pci-express-spe-capability-registers",
              "text": "Secondary PCI Express (SPE) Capability registers"
            },
            {
              "level": 1,
              "anchor": "pasid-extended-capability-structure-registers",
              "text": "PASID Extended Capability Structure registers"
            },
            {
              "level": 1,
              "anchor": "ln-requester-extended-capability-registers",
              "text": "LN Requester Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "downstream-port-containment-dpc-extended-capability-registers",
              "text": "Downstream Port Containment (DPC) Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "l1-pm-substates-extended-capability-registers",
              "text": "L1 PM Substates Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "precision-time-management-ptm-capability-registers",
              "text": "Precision Time Management (PTM) Capability registers"
            },
            {
              "level": 1,
              "anchor": "m-pcie-extended-capability-registers",
              "text": "M-PCIe Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "frs-queueing-extended-capability-registers",
              "text": "FRS Queueing Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "readiness-time-reporting-extended-capability-registers",
              "text": "Readiness Time Reporting Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "data-link-feature-extended-capability-registers",
              "text": "Data Link Feature Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "physical-layer-16-0-gt-s-extended-capability-registers",
              "text": "Physical Layer 16.0 GT/s Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "lane-margining-at-the-receiver-extended-capability-registers",
              "text": "Lane Margining at the Receiver Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "physical-layer-32-0-gt-s-extended-capability-registers",
              "text": "Physical Layer 32.0 GT/s Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "designated-vendor-specific-extended-capability-dvsec-registers",
              "text": "Designated Vendor-Specific Extended Capability (DVSEC) registers"
            },
            {
              "level": 1,
              "anchor": "hierarchy-id-extended-capability-registers",
              "text": "Hierarchy ID Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "native-pcie-enclosure-management-npem-extended-capability-registers",
              "text": "Native PCIe Enclosure Management (NPEM) Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "alternate-protocol-extended-capability-registers",
              "text": "Alternate Protocol Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "system-firmware-intermediary-sfi-extended-capability-registers",
              "text": "System Firmware Intermediary (SFI) Extended Capability registers"
            },
            {
              "level": 1,
              "anchor": "single-root-i-o-virtualization-sr-iov-extended-capability-registers",
              "text": "Single Root I/O Virtualization (SR-IOV) Extended Capability registers"
            },
            {
              "level": 2,
              "anchor": "methods-3",
              "text": "Methods"
            },
            {
              "level": 1,
              "anchor": "virtual-function-type-0-bank",
              "text": "Virtual Function Type 0 Bank"
            },
            {
              "level": 1,
              "anchor": "virtual-function-base-address",
              "text": "Virtual Function Base Address"
            }
          ],
          "children": []
        }
      ]
    }
  ]
}