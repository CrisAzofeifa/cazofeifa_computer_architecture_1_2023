/* Generated by dmlc, do not edit! */

#ifndef DMA_DEVICE_DML_H
#define DMA_DEVICE_DML_H

#define DML_PREFIX(x) dma_device_##x

#define DMLDIR_IO_MEMORY_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/io-memory.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/io-memory.dml"

#include <simics/devs/io-memory.h>

#undef DMLDIR_IO_MEMORY_H

#define DMLDIR_INSTRUMENTATION_PROVIDER_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/instrumentation-provider.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/instrumentation-provider.dml"

#include <simics/model-iface/instrumentation-provider.h>

#undef DMLDIR_INSTRUMENTATION_PROVIDER_H

#define DMLDIR_BANK_INSTRUMENTATION_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/bank-instrumentation.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/bank-instrumentation.dml"

#include <simics/model-iface/bank-instrumentation.h>

#undef DMLDIR_BANK_INSTRUMENTATION_H

#define DMLDIR_INT_REGISTER_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/int-register.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/int-register.dml"

#include <simics/model-iface/int-register.h>

#undef DMLDIR_INT_REGISTER_H

#define DMLDIR_REGISTER_VIEW_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/register-view.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/register-view.dml"

#include <simics/model-iface/register-view.h>

#undef DMLDIR_REGISTER_VIEW_H

#define DMLDIR_REGISTER_VIEW_READ_ONLY_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/register-view-read-only.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/register-view-read-only.dml"

#include <simics/model-iface/register-view-read-only.h>

#undef DMLDIR_REGISTER_VIEW_READ_ONLY_H

#define DMLDIR_HASHTAB_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/hashtab.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/hashtab.dml"

#include <simics/util/hashtab.h>

#undef DMLDIR_HASHTAB_H

#define DMLDIR_PYTHON_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/simulator/python.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/simulator/python.dml"

#include <simics/simulator/python.h>

#undef DMLDIR_PYTHON_H

#define DMLDIR_SIM_GET_CLASS_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/simulator/sim-get-class.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/simulator/sim-get-class.dml"

#include <simics/simulator/sim-get-class.h>

#undef DMLDIR_SIM_GET_CLASS_H

#define DMLDIR_DML_BUILTINS_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/1.4/dml-builtins.h"
#line 12 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/1.4/dml-builtins.dml"

    #include <simics/dmllib.h>

#undef DMLDIR_DML_BUILTINS_H

#define DMLDIR_BUILD_ID_6_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/build-id-6.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/build-id-6.dml"

#include <simics/build-id-6.h>

#undef DMLDIR_BUILD_ID_6_H

#define DMLDIR_BUILD_ID_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/build-id.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/build-id.dml"

#include <simics/build-id.h>

#undef DMLDIR_BUILD_ID_H

#define DMLDIR_DBUFFER_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/dbuffer.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/dbuffer.dml"

#include <simics/util/dbuffer.h>

#undef DMLDIR_DBUFFER_H

#define DMLDIR_SWABBER_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/swabber.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/swabber.dml"

#include <simics/util/swabber.h>

#undef DMLDIR_SWABBER_H

#define DMLDIR_FRAGS_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/frags.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/frags.dml"

#include <simics/util/frags.h>

#undef DMLDIR_FRAGS_H

#define DMLDIR_CALLBACKS_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/callbacks.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/callbacks.dml"

#include <simics/base/callbacks.h>

#undef DMLDIR_CALLBACKS_H

#define DMLDIR_ARITH_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/arith.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/arith.dml"

#include <simics/util/arith.h>

#undef DMLDIR_ARITH_H

#define DMLDIR_INT128_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/int128.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/int128.dml"

#include <simics/util/int128.h>

#undef DMLDIR_INT128_H

#define DMLDIR_DURATION_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/duration.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/duration.dml"

#include <simics/base/duration.h>

#undef DMLDIR_DURATION_H

#define DMLDIR_BIGTIME_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/bigtime.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/bigtime.dml"

#include <simics/base/bigtime.h>

#undef DMLDIR_BIGTIME_H

#define DMLDIR_LOCAL_TIME_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/local-time.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/local-time.dml"

#include <simics/base/local-time.h>

#undef DMLDIR_LOCAL_TIME_H

#define DMLDIR_CYCLE_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/cycle.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/cycle.dml"

#include <simics/model-iface/cycle.h>

#undef DMLDIR_CYCLE_H

#define DMLDIR_CLOCK_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/clock.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/clock.dml"

#include <simics/base/clock.h>

#undef DMLDIR_CLOCK_H

#define DMLDIR_LOG_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/log.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/log.dml"

#include <simics/base/log.h>

#undef DMLDIR_LOG_H

#define DMLDIR_CONFIGURATION_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/configuration.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/configuration.dml"

#include <simics/base/configuration.h>

#undef DMLDIR_CONFIGURATION_H

#define DMLDIR_EVENT_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/event.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/event.dml"

#include <simics/base/event.h>

#undef DMLDIR_EVENT_H

#define DMLDIR_GLOBAL_NOTIFIER_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/global-notifier.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/global-notifier.dml"

#include <simics/base/global-notifier.h>

#undef DMLDIR_GLOBAL_NOTIFIER_H

#define DMLDIR_HAP_PRODUCER_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/hap-producer.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/hap-producer.dml"

#include <simics/base/hap-producer.h>

#undef DMLDIR_HAP_PRODUCER_H

#define DMLDIR_NOTIFIER_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/notifier.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/notifier.dml"

#include <simics/base/notifier.h>

#undef DMLDIR_NOTIFIER_H

#define DMLDIR_OBJECT_LOCKS_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/object-locks.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/object-locks.dml"

#include <simics/base/object-locks.h>

#undef DMLDIR_OBJECT_LOCKS_H

#define DMLDIR_SIM_EXCEPTION_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/sim-exception.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/sim-exception.dml"

#include <simics/base/sim-exception.h>

#undef DMLDIR_SIM_EXCEPTION_H

#define DMLDIR_4_8_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/obsolete/4_8.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/obsolete/4_8.dml"

#include <simics/obsolete/4_8.h>

#undef DMLDIR_4_8_H

#define DMLDIR_EMBED_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/simulator/embed.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/simulator/embed.dml"

#include <simics/simulator/embed.h>

#undef DMLDIR_EMBED_H

#define DMLDIR_5_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/obsolete/5.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/obsolete/5.dml"

#include <simics/obsolete/5.h>

#undef DMLDIR_5_H

#define DMLDIR_DEVICE_API_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/device-api.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/device-api.dml"

#include <simics/device-api.h>

#undef DMLDIR_DEVICE_API_H

#define DMLDIR_SIGNAL_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/signal.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/signal.dml"

#include <simics/devs/signal.h>

#undef DMLDIR_SIGNAL_H

#define DMLDIR_RAM_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/ram.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/ram.dml"

#include <simics/devs/ram.h>

#undef DMLDIR_RAM_H

#define DMLDIR_CBDATA_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/cbdata.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/cbdata.dml"

#include <simics/base/cbdata.h>

#undef DMLDIR_CBDATA_H

#define DMLDIR_TRANSLATOR_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/translator.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/translator.dml"

#include <simics/devs/translator.h>

#undef DMLDIR_TRANSLATOR_H

#define DMLDIR_BREAKPOINTS_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/breakpoints.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/breakpoints.dml"

#include <simics/base/breakpoints.h>

#undef DMLDIR_BREAKPOINTS_H

#define DMLDIR_TYPES_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/processor/types.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/processor/types.dml"

#include <simics/processor/types.h>

#undef DMLDIR_TYPES_H

#define DMLDIR_DIRECT_MEMORY_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/direct-memory.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/direct-memory.dml"

#include <simics/base/direct-memory.h>

#undef DMLDIR_DIRECT_MEMORY_H

#define DMLDIR_MAP_TARGET_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/map-target.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/map-target.dml"

#include <simics/base/map-target.h>

#undef DMLDIR_MAP_TARGET_H

#define DMLDIR_TRANSACTION_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/transaction.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/transaction.dml"

#include <simics/base/transaction.h>

#undef DMLDIR_TRANSACTION_H

#define DMLDIR_TRANSACTION_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/transaction.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/model-iface/transaction.dml"

#include <simics/model-iface/transaction.h>

#undef DMLDIR_TRANSACTION_H

#define DMLDIR_MEMORY_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/memory.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/memory.dml"

#include <simics/base/memory.h>

#undef DMLDIR_MEMORY_H

#define DMLDIR_MEMORY_TRANSACTION_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/memory-transaction.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/memory-transaction.dml"

#include <simics/base/memory-transaction.h>

#undef DMLDIR_MEMORY_TRANSACTION_H

#define DMLDIR_SOBJECT_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/sobject.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/sobject.dml"

#include <simics/base/sobject.h>

#undef DMLDIR_SOBJECT_H

#define DMLDIR_TYPES_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/types.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/types.dml"

#include <simics/base/types.h>

#undef DMLDIR_TYPES_H

#define DMLDIR_VERSION_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/version.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/version.dml"

#include <simics/base/version.h>

#undef DMLDIR_VERSION_H

#define DMLDIR_ATTR_VALUE_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/attr-value.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/attr-value.dml"

#include <simics/base/attr-value.h>

#undef DMLDIR_ATTR_VALUE_H

#define DMLDIR_ALLOC_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/alloc.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/alloc.dml"

#include <simics/util/alloc.h>

#undef DMLDIR_ALLOC_H

#define DMLDIR_MODULE_HOST_CONFIG_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/module-host-config.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/module-host-config.dml"

#include <simics/module-host-config.h>

#undef DMLDIR_MODULE_HOST_CONFIG_H

#define DMLDIR_HOST_INFO_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/host-info.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/host-info.dml"

#include <simics/host-info.h>

#undef DMLDIR_HOST_INFO_H

#define DMLDIR_BASE_TYPES_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base-types.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base-types.dml"

#include <simics/base-types.h>

#undef DMLDIR_BASE_TYPES_H

#define DMLDIR_STRBUF_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/strbuf.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/strbuf.dml"

#include <simics/util/strbuf.h>

#undef DMLDIR_STRBUF_H

#define DMLDIR_HELP_MACROS_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/help-macros.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/help-macros.dml"

#include <simics/util/help-macros.h>

#undef DMLDIR_HELP_MACROS_H

#define DMLDIR_VECT_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/vect.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/util/vect.dml"

#include <simics/util/vect.h>

#undef DMLDIR_VECT_H

#define DMLDIR_CONF_OBJECT_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/conf-object.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/conf-object.dml"

#include <simics/base/conf-object.h>

#undef DMLDIR_CONF_OBJECT_H

#define DMLDIR_TIME_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/time.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/base/time.dml"

#include <simics/base/time.h>

#undef DMLDIR_TIME_H

#define DMLDIR_PYWRAP_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/pywrap.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/pywrap.dml"

#include <simics/pywrap.h>

#undef DMLDIR_PYWRAP_H

#define DMLDIR_MEMORY_SPACE_H "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/memory-space.h"
#line 16 "/home/mendezos/Documents/simics_installation/simics-6.0.166/linux64/bin/dml/api/6/1.4/simics/devs/memory-space.dml"

#include <simics/devs/memory-space.h>

#undef DMLDIR_MEMORY_SPACE_H

#line 443 "dma-device-dml.h"

#include "dma-device-dml-struct.h"

typedef _traitref_t name;
typedef _traitref_t _qname;
typedef _traitref_t desc;
typedef _traitref_t documentation;
typedef _traitref_t limitations;
typedef _traitref_t object;
typedef _traitref_t implement;
typedef _traitref_t bank_transaction;
typedef _traitref_t bank_io_memory;
typedef _traitref_t shown_desc;
typedef _traitref_t bank;
typedef _traitref_t _conf_attribute;
typedef _traitref_t get_val;
typedef _traitref_t _get;
typedef _traitref_t get;
typedef _traitref_t set_val;
typedef _traitref_t _set;
typedef _traitref_t set;
typedef _traitref_t _bitsize;
typedef _traitref_t read_register;
typedef _traitref_t write_register;
typedef _traitref_t init;
typedef _traitref_t init_val;
typedef _traitref_t _register;
typedef _traitref_t _lsb;
typedef _traitref_t field;
typedef _traitref_t read_field;
typedef _traitref_t _reg_or_field;
typedef _traitref_t _log_unimpl_read;
typedef _traitref_t write_field;
typedef _traitref_t _simple_write;
typedef _traitref_t _log_unimpl_write;
typedef _traitref_t unimpl;
typedef _traitref_t read_only;
typedef _traitref_t _connect;
typedef _traitref_t _interface;
typedef _traitref_t post_init;
typedef _traitref_t device;
typedef _traitref_t _set_field;
typedef _traitref_t _get_field;
typedef _traitref_t _write_field;
typedef _traitref_t _read_field;
typedef _traitref_t _reg_write_as_field;
typedef _traitref_t _reg_read_as_field;
typedef _traitref_t power_on_reset;
typedef _traitref_t _init_val_power_on_reset;
typedef _traitref_t signal_port;
typedef _traitref_t signal_connect;
typedef _traitref_t port;
typedef _traitref_t poreset;
typedef _traitref_t _hard_reset;
typedef _traitref_t _init_val_hard_reset;
typedef _traitref_t hreset;
typedef _traitref_t _soft_reset;
typedef _traitref_t _init_val_soft_reset;
typedef _traitref_t sreset;
typedef _traitref_t soft_reset_val;
typedef _traitref_t ignore_write;
typedef _traitref_t read_zero;
typedef _traitref_t write_only;
typedef _traitref_t write_1_clears;
typedef _traitref_t clear_on_read;
typedef _traitref_t write_1_only;
typedef _traitref_t write_0_only;
typedef _traitref_t read_constant;
typedef _traitref_t no_reset;
typedef _traitref_t constant;
typedef _traitref_t silent_constant;
typedef _traitref_t zeros;
typedef _traitref_t ones;
typedef _traitref_t ignore;
typedef _traitref_t reserved;
typedef _traitref_t read_unimpl;
typedef _traitref_t write_unimpl;
typedef _traitref_t silent_unimpl;
typedef _traitref_t undocumented;
typedef _traitref_t unmapped;
typedef _traitref_t sticky;
typedef _traitref_t design_limitation;
typedef _traitref_t function_mapped_bank;
typedef _traitref_t function_io_memory;
typedef _traitref_t miss_pattern_bank;
typedef _traitref_t bank_obj;
typedef _traitref_t map_target;
typedef _traitref_t group;
typedef _traitref_t attribute;
typedef _traitref_t bool_attr;
typedef _traitref_t uint64_attr;
typedef _traitref_t int64_attr;
typedef _traitref_t double_attr;
typedef _traitref_t pseudo_attr;
typedef _traitref_t read_only_attr;
typedef _traitref_t write_only_attr;
typedef _traitref_t init_as_subobj;
typedef _traitref_t subdevice;
typedef _traitref_t __read;
typedef _traitref_t __write;
typedef _traitref_t event;
typedef _traitref_t _event;
typedef _traitref_t _time_event;
typedef _traitref_t _cycle_event;
typedef _traitref_t _simple_event;
typedef _traitref_t simple_time_event;
typedef _traitref_t simple_cycle_event;
typedef _traitref_t _custom_event;
typedef _traitref_t custom_time_event;
typedef _traitref_t custom_cycle_event;
typedef _traitref_t _uint64_event;
typedef _traitref_t uint64_time_event;
typedef _traitref_t uint64_cycle_event;
typedef _traitref_t __implicit__read_field___write_field__field__unimpl;
typedef _traitref_t __implicit__write_field__field__read_only;


struct _name {
    char const **name;
};
struct __qname {
};
struct _desc {
};
struct _documentation {
};
struct _limitations {
};
struct _object {
    struct __qname _qname;
    struct _desc desc;
    struct _documentation documentation;
    struct _limitations limitations;
    struct _name name;
};
struct _implement {
    struct _object object;
};
struct _bank_transaction {
    struct _implement implement;
};
struct _bank_io_memory {
    struct _implement implement;
};
struct _shown_desc {
    struct _desc desc;
    char const **shown_desc;
};
struct _memo_bank___reginfo_table {
    _register const *p__out0;
    uint64 p__out1;
    int8 ran;
};
struct _memo_bank___sorted_regs {
    _register const *p__out0;
    int p__out1;
    int8 ran;
};
struct _bank {
    struct _object object;
    struct _shown_desc shown_desc;
    bool *partial;
    bool *overlapping;
    bool *_le_byte_order;
    _each_in_param_t _each_register;
    bool *be_bitorder;
    bool *use_io_memory;
    uint32 _before_read_callbacks;
    uint32 _after_read_callbacks;
    uint32 _before_write_callbacks;
    uint32 _after_write_callbacks;
    uint32 _connections;
    uint32 _cached_bank_obj;
    bool (*_get_register)(dma_device_t *arg0, bank arg1, uint32 arg2, _register *arg3);
    bool (*unmapped_read)(dma_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, void  *arg4, uint64 *arg5);
    bool (*unmapped_write)(dma_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 arg4, void  *arg5);
    bool (*read)(dma_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, void  *arg4, uint64 *arg5);
    bool (*unmapped_get)(dma_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 *arg4);
    bool (*get)(dma_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 *arg4);
    bool (*write)(dma_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 arg4, void  *arg5);
    void  (*set)(dma_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 arg4);
    bool (*io_memory_access)(dma_device_t *arg0, bank arg1, generic_transaction_t *arg2, uint64 arg3, void  *arg4);
    exception_type_t (*transaction_access)(dma_device_t *arg0, bank arg1, transaction_t *arg2, uint64 arg3, void  *arg4);
    struct _memo_bank___reginfo_table *_memo_outs__reginfo_table;
    struct _memo_bank___sorted_regs *_memo_outs__sorted_regs;
};
struct __conf_attribute {
    struct _object object;
    bool *readable;
    bool *writable;
    char const **_attr_type;
    char const **_attr_name;
    conf_class_t ***_parent_obj_class;
    _dml_attr_parent_obj_proxy_info_t *_parent_obj_proxy_info;
    uint32 *_attr_start_dim;
    bool *_attr_allow_cutoff;
    char const **_documentation;
    attr_attr_t *_flags;
    bool *_should_be_registered;
    set_error_t (*set_attribute)(dma_device_t *arg0, _conf_attribute arg1, attr_value_t arg2);
    attr_value_t (*get_attribute)(dma_device_t *arg0, _conf_attribute arg1);
};
struct _get_val {
    uint64 (*get_val)(dma_device_t *arg0, get_val arg1);
    uint64 (*_default_get)(dma_device_t *arg0, get_val arg1);
};
struct __get {
    struct _get_val get_val;
    uint64 (*get)(dma_device_t *arg0, _get arg1);
};
struct _get {
    struct __get _get;
};
struct _set_val {
    void  (*set_val)(dma_device_t *arg0, set_val arg1, uint64 arg2);
    void  (*_default_set)(dma_device_t *arg0, set_val arg1, uint64 arg2);
};
struct __set {
    struct _set_val set_val;
    void  (*set)(dma_device_t *arg0, _set arg1, uint64 arg2);
};
struct _set {
    struct __set _set;
};
struct __bitsize {
    uint8 *bitsize;
};
struct _read_register {
    uint64 (*read_register)(dma_device_t *arg0, read_register arg1, uint64 arg2, void  *arg3);
};
struct _write_register {
    void  (*write_register)(dma_device_t *arg0, write_register arg1, uint64 arg2, uint64 arg3, void  *arg4);
};
struct _init {
    _each_in_param_t _each_init;
    void  (*init)(dma_device_t *arg0, init arg1);
};
struct _init_val {
    struct _init init;
    uint64 *init_val;
    void  (*_default_init)(dma_device_t *arg0, init_val arg1);
};
struct __register {
    struct __bitsize _bitsize;
    struct __conf_attribute _conf_attribute;
    struct _get get;
    struct _init_val init_val;
    struct _read_register read_register;
    struct _set set;
    struct _shown_desc shown_desc;
    struct _write_register write_register;
    _each_in_param_t fields;
    _each_in_param_t _get_fields;
    _each_in_param_t _set_fields;
    _each_in_param_t _read_fields;
    _each_in_param_t _write_fields;
    uint64 *offset;
    bool *_le_byte_order;
    bool *_is_read_only;
    bool *mapped;
    uint32 val;
    uint64 (*read_unmapped_bits)(dma_device_t *arg0, _register arg1, uint64 arg2, void  *arg3);
    void  (*write_unmapped_bits)(dma_device_t *arg0, _register arg1, uint64 arg2, uint64 arg3, void  *arg4);
};
struct __lsb {
    uint8 *lsb;
};
struct _field {
    struct __bitsize _bitsize;
    struct __get _get;
    struct __lsb _lsb;
    struct __set _set;
    struct _init_val init_val;
    struct _object object;
    struct _shown_desc shown_desc;
    _register *reg;
};
struct _read_field {
    uint64 (*read_field)(dma_device_t *arg0, read_field arg1, uint64 arg2, void  *arg3);
};
struct __reg_or_field {
    bool *is_register;
};
struct __log_unimpl_read {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct _get_val get_val;
    struct _read_field read_field;
};
struct _write_field {
    void  (*write_field)(dma_device_t *arg0, write_field arg1, uint64 arg2, uint64 arg3, void  *arg4);
};
struct __simple_write {
    struct _get_val get_val;
    struct _set_val set_val;
};
struct __log_unimpl_write {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct __simple_write _simple_write;
    struct _write_field write_field;
};
struct _unimpl {
    struct __log_unimpl_read _log_unimpl_read;
    struct __log_unimpl_write _log_unimpl_write;
    struct _limitations limitations;
};
struct _read_only {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct _get_val get_val;
    struct _write_field write_field;
};
struct __connect {
    struct __conf_attribute _conf_attribute;
    _each_in_param_t _each_interface;
    uint32 obj;
    uint32 port;
    bool (*validate)(dma_device_t *arg0, _connect arg1, conf_object_t *arg2);
    void  (*set)(dma_device_t *arg0, _connect arg1, conf_object_t *arg2);
};
struct __interface {
    struct _object object;
    bool *_required;
    uint32 val;
};
struct _post_init {
    _each_in_param_t _each_post_init;
    void  (*post_init)(dma_device_t *arg0, post_init arg1);
};
struct _device {
    struct _init init;
    struct _object object;
    struct _post_init post_init;
};
struct __set_field {
    struct __bitsize _bitsize;
    struct __lsb _lsb;
    struct _set set;
};
struct __get_field {
    struct __bitsize _bitsize;
    struct __lsb _lsb;
    struct _get get;
};
struct __write_field {
    struct __bitsize _bitsize;
    struct __lsb _lsb;
    struct _write_field write_field;
};
struct __read_field {
    struct __bitsize _bitsize;
    struct __lsb _lsb;
    struct _read_field read_field;
};
struct __reg_write_as_field {
    struct __register _register;
    struct _write_field write_field;
};
struct __reg_read_as_field {
    struct _read_field read_field;
    struct __register _register;
};
struct _power_on_reset {
    _each_in_param_t _each_power_on_reset;
    void  (*power_on_reset)(dma_device_t *arg0, power_on_reset arg1);
    void  (*_default_power_on_reset)(dma_device_t *arg0, power_on_reset arg1);
};
struct __init_val_power_on_reset {
    struct _init_val init_val;
    struct _power_on_reset power_on_reset;
};
struct _signal_port {
};
struct _signal_connect {
    struct __connect _connect;
    struct _post_init post_init;
};
struct _port {
    struct _object object;
    uint32 _cached_port_obj;
};
struct _poreset {
    struct _power_on_reset power_on_reset;
};
struct __hard_reset {
    _each_in_param_t _each_hard_reset;
    void  (*hard_reset)(dma_device_t *arg0, _hard_reset arg1);
    void  (*_default_hard_reset)(dma_device_t *arg0, _hard_reset arg1);
};
struct __init_val_hard_reset {
    struct __hard_reset _hard_reset;
    struct _init_val init_val;
};
struct _hreset {
    struct __hard_reset _hard_reset;
};
struct __soft_reset {
    _each_in_param_t _each_soft_reset;
    void  (*soft_reset)(dma_device_t *arg0, _soft_reset arg1);
    void  (*_default_soft_reset)(dma_device_t *arg0, _soft_reset arg1);
};
struct __init_val_soft_reset {
    struct _init_val init_val;
    struct __soft_reset _soft_reset;
};
struct _sreset {
    struct __soft_reset _soft_reset;
};
struct _soft_reset_val {
    struct _set_val set_val;
    struct __soft_reset _soft_reset;
    uint64 *soft_reset_val;
};
struct _ignore_write {
    struct _write_field write_field;
};
struct _read_zero {
    struct _read_field read_field;
};
struct _write_only {
    struct __qname _qname;
    struct _read_field read_field;
};
struct _write_1_clears {
    struct __simple_write _simple_write;
    struct _write_field write_field;
};
struct _clear_on_read {
    struct _get_val get_val;
    struct _read_field read_field;
    struct _set_val set_val;
};
struct _write_1_only {
    struct __simple_write _simple_write;
    struct _write_field write_field;
};
struct _write_0_only {
    struct __simple_write _simple_write;
    struct _write_field write_field;
};
struct _read_constant {
    struct _read_field read_field;
    uint64 *read_val;
};
struct _no_reset {
    struct __hard_reset _hard_reset;
    struct _power_on_reset power_on_reset;
    struct __soft_reset _soft_reset;
};
struct _constant {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct _get_val get_val;
    struct _no_reset no_reset;
    struct _write_field write_field;
};
struct _silent_constant {
    struct _ignore_write ignore_write;
    struct _no_reset no_reset;
};
struct _zeros {
    struct _constant constant;
    struct _init_val init_val;
};
struct _ones {
    struct _constant constant;
    struct _init_val init_val;
};
struct _ignore {
    struct _ignore_write ignore_write;
    struct _no_reset no_reset;
};
struct _reserved {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct __simple_write _simple_write;
    struct _write_field write_field;
    uint32 _has_logged;
};
struct _read_unimpl {
    struct __log_unimpl_read _log_unimpl_read;
    struct _limitations limitations;
};
struct _write_unimpl {
    struct __log_unimpl_write _log_unimpl_write;
    struct _object object;
};
struct _silent_unimpl {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct __simple_write _simple_write;
    struct _limitations limitations;
    struct _read_field read_field;
    struct _write_field write_field;
};
struct _undocumented {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct __simple_write _simple_write;
    struct _read_field read_field;
    struct _write_field write_field;
};
struct _unmapped {
    struct __register _register;
};
struct _sticky {
    struct __soft_reset _soft_reset;
};
struct _design_limitation {
    struct _limitations limitations;
};
struct _function_mapped_bank {
    struct _bank bank;
    int *function;
};
struct _function_io_memory {
};
struct _miss_pattern_bank {
    struct _bank bank;
    uint8 *miss_pattern;
};
struct _bank_obj {
    struct _bank bank;
};
struct _map_target {
    struct __connect _connect;
    uint32 map_target;
    exception_type_t (*issue)(dma_device_t *arg0, map_target arg1, transaction_t *arg2, uint64 arg3);
};
struct _group {
    struct _object object;
};
struct _attribute {
    struct __conf_attribute _conf_attribute;
    attr_value_t (*get)(dma_device_t *arg0, attribute arg1);
    bool (*set)(dma_device_t *arg0, attribute arg1, attr_value_t arg2);
};
struct _bool_attr {
    struct _attribute attribute;
    struct _init init;
    bool *init_val;
    uint32 val;
};
struct _uint64_attr {
    struct _attribute attribute;
    struct _init init;
    uint64 *init_val;
    uint32 val;
};
struct _int64_attr {
    struct _attribute attribute;
    struct _init init;
    int64 *init_val;
    uint32 val;
};
struct _double_attr {
    struct _attribute attribute;
    struct _init init;
    double *init_val;
    uint32 val;
};
struct _pseudo_attr {
    struct _attribute attribute;
};
struct _read_only_attr {
    struct _pseudo_attr pseudo_attr;
};
struct _write_only_attr {
    struct _pseudo_attr pseudo_attr;
};
struct _init_as_subobj {
    struct __connect _connect;
    struct _init init;
    char const **classname;
};
struct _subdevice {
    struct _object object;
    uint32 _cached_port_obj;
};
struct ___read {
    struct __get _get;
    struct _read_field read_field;
    uint64 (*read)(dma_device_t *arg0, __read arg1);
};
struct ___write {
    struct __get _get;
    struct __set _set;
    struct _write_field write_field;
    void  (*write)(dma_device_t *arg0, __write arg1, uint64 arg2);
};
struct _event {
    struct _object object;
    struct _shown_desc shown_desc;
    event_class_t ***_pevclass;
    void  (*_callback)(dma_device_t *arg0, event arg1, void  *arg2);
    char *(*_describe_event)(dma_device_t *arg0, event arg1, void  *arg2);
    attr_value_t (*_get_event_info)(dma_device_t *arg0, event arg1, void  *arg2);
    void  *(*_set_event_info)(dma_device_t *arg0, event arg1, attr_value_t arg2);
    void  (*_destroy)(dma_device_t *arg0, event arg1, void  *arg2);
};
struct __event {
    struct _event event;
};
struct __time_event {
    struct __event _event;
};
struct __cycle_event {
    struct __event _event;
};
struct __simple_event {
    struct __event _event;
    void  (*event)(dma_device_t *arg0, _simple_event arg1);
};
struct _simple_time_event {
    struct __simple_event _simple_event;
    struct __time_event _time_event;
};
struct _simple_cycle_event {
    struct __cycle_event _cycle_event;
    struct __simple_event _simple_event;
};
struct __custom_event {
    struct __event _event;
    void  (*event)(dma_device_t *arg0, _custom_event arg1, void  *arg2);
    attr_value_t (*get_event_info)(dma_device_t *arg0, _custom_event arg1, void  *arg2);
    void  *(*set_event_info)(dma_device_t *arg0, _custom_event arg1, attr_value_t arg2);
    void  (*destroy)(dma_device_t *arg0, _custom_event arg1, void  *arg2);
};
struct _custom_time_event {
    struct __custom_event _custom_event;
    struct __time_event _time_event;
};
struct _custom_cycle_event {
    struct __custom_event _custom_event;
    struct __cycle_event _cycle_event;
};
struct __uint64_event {
    struct __event _event;
    void  (*event)(dma_device_t *arg0, _uint64_event arg1, uint64 arg2);
};
struct _uint64_time_event {
    struct __time_event _time_event;
    struct __uint64_event _uint64_event;
};
struct _uint64_cycle_event {
    struct __cycle_event _cycle_event;
    struct __uint64_event _uint64_event;
};
struct ___implicit__read_field___write_field__field__unimpl {
    struct __read_field _read_field;
    struct __write_field _write_field;
    struct _field field;
    struct _unimpl unimpl;
};
struct ___implicit__write_field__field__read_only {
    struct __write_field _write_field;
    struct _field field;
    struct _read_only read_only;
};


struct __devstruct_1dma_device_0regs_1DMA_control {
    uint64 val;
};
struct __devstruct_1dma_device_0regs_1DMA_dest {
    uint64 val;
};
struct __devstruct_1dma_device_0regs_1DMA_source {
    uint64 val;
};
struct __devstruct_1dma_device_0regs {
    conf_object_t *_obj;
    _callback_vect_t _after_read_callbacks;
    _callback_vect_t _after_write_callbacks;
    _callback_vect_t _before_read_callbacks;
    _callback_vect_t _before_write_callbacks;
    conf_object_t *_cached_bank_obj;
    _connection_vect_t _connections;
    struct __devstruct_1dma_device_0regs_1DMA_control DMA_control;
    struct __devstruct_1dma_device_0regs_1DMA_dest DMA_dest;
    struct __devstruct_1dma_device_0regs_1DMA_source DMA_source;
};
struct __devstruct_1dma_device_2target_mem_space_1memory_space {
    void const  *val;
};
struct __devstruct_1dma_device_2target_mem_space {
    conf_object_t *obj;
    char const *port;
    struct __devstruct_1dma_device_2target_mem_space_1memory_space memory_space;
};
struct dma_device {
    conf_object_t obj;
    bool _has_state_callbacks;
    bool _issuing_state_callbacks;
    dml_qname_cache_t _qname_cache;
    ht_int_table_t _subsequent_log_ht;
    struct __devstruct_1dma_device_0regs regs;
    struct __devstruct_1dma_device_2target_mem_space target_mem_space;
};
typedef enum dma_device_log_group {
    _dml_loggroup_Register_Read = 1,
    _dml_loggroup_Register_Write = 2,
} dma_device_log_group_t;

void hard_reset_dma_device(dma_device_t *_obj);
void soft_reset_dma_device(dma_device_t *_obj);

#endif /* not DMA_DEVICE_DML_H */
