#this is in case you want to run your program without the tomasulo algorithm
if not defined activate_tomasulo {$activate_tomasulo = TRUE}

output-radix 16
#---- load the device components ----
#load a simple Intel 64 processor model
load-module x86-intel64
load-module x86-nehalem-comp
#load a component to host the processor
load-module x86-comp
#load a model for a simple dimm
load-module memory-comp
#load the tomasulo instrumentation tool 
load-module tomasulo
load-module tomasulo_connection_t
#---- create the objects -----
#create the dimm
create-simple-memory-module memory_megs = 0x10000
#create the motherboard
create-motherboard-x86-simple
#create the processor model
create-processor-x86-intel64
#create the chassis (to host the motherboard)
create-x86-chassis name = chassis
#connect dimm to the motherboard
connect cnt0 = "motherboard0.dimm[0]" cnt1 = dimm0.mem_bus
#connect the processor to the motherboard
connect processor0.socket cnt1 = "motherboard0.cpu[0]"

#instantiate everything
instantiate-components

#connect the instrumentation model for the tomasulo
if($activate_tomasulo == TRUE) {
    new-tomasulo
    new-tomasulo name = tomasulo -connect-all
}
#setup of all the segments needed. Code segment: CS, Data segment:DS, Stack segment: SS
processor0.core[0][0]->cs[7] = 0
processor0.core[0][0]->cs[0] = 0
processor0.core[0][0]->rip = 0
processor0.core[0][0]->ds[0] = 0
processor0.core[0][0]->cs[0] = 0
processor0.core[0][0]->ss[7] = 0xfff + 1
processor0.core[0][0]->ss[0] = 0
processor0.core[0][0]->ds[7] = 0xfff + 0xfff + 2

#example of loading a binary image...
load-file filename = example.bin offset = 0x0
